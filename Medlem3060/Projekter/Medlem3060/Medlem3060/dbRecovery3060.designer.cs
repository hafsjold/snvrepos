#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace nsPuls3060
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="dbRecovery3060")]
	public partial class DbRecovery3060 : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTblContent(TblContent instance);
    partial void UpdateTblContent(TblContent instance);
    partial void DeleteTblContent(TblContent instance);
    partial void InsertTblDirectory(TblDirectory instance);
    partial void UpdateTblDirectory(TblDirectory instance);
    partial void DeleteTblDirectory(TblDirectory instance);
    partial void InsertTblRecoveryPoint(TblRecoveryPoint instance);
    partial void UpdateTblRecoveryPoint(TblRecoveryPoint instance);
    partial void DeleteTblRecoveryPoint(TblRecoveryPoint instance);
    partial void InsertTblRecoveryPointContent(TblRecoveryPointContent instance);
    partial void UpdateTblRecoveryPointContent(TblRecoveryPointContent instance);
    partial void DeleteTblRecoveryPointContent(TblRecoveryPointContent instance);
    partial void InsertTblRecoveryPointLine(TblRecoveryPointLine instance);
    partial void UpdateTblRecoveryPointLine(TblRecoveryPointLine instance);
    partial void DeleteTblRecoveryPointLine(TblRecoveryPointLine instance);
    #endregion
		
		public DbRecovery3060(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbRecovery3060(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbRecovery3060(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbRecovery3060(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TblContent> TblContent
		{
			get
			{
				return this.GetTable<TblContent>();
			}
		}
		
		public System.Data.Linq.Table<TblDirectory> TblDirectory
		{
			get
			{
				return this.GetTable<TblDirectory>();
			}
		}
		
		public System.Data.Linq.Table<TblRecoveryPoint> TblRecoveryPoint
		{
			get
			{
				return this.GetTable<TblRecoveryPoint>();
			}
		}
		
		public System.Data.Linq.Table<TblRecoveryPointContent> TblRecoveryPointContent
		{
			get
			{
				return this.GetTable<TblRecoveryPointContent>();
			}
		}
		
		public System.Data.Linq.Table<TblRecoveryPointLine> TblRecoveryPointLine
		{
			get
			{
				return this.GetTable<TblRecoveryPointLine>();
			}
		}
	}
	
	[Table(Name="tblContent")]
	public partial class TblContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Directoryid;
		
		private string _Checksum;
		
		private long _Size;
		
		private System.DateTime _Atime;
		
		private System.DateTime _Mtime;
		
		private System.Data.Linq.Binary _Data;
		
		private EntitySet<TblRecoveryPointContent> _TblRecoveryPointContent;
		
		private EntityRef<TblDirectory> _TblDirectory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDirectoryidChanging(int value);
    partial void OnDirectoryidChanged();
    partial void OnChecksumChanging(string value);
    partial void OnChecksumChanged();
    partial void OnSizeChanging(long value);
    partial void OnSizeChanged();
    partial void OnAtimeChanging(System.DateTime value);
    partial void OnAtimeChanged();
    partial void OnMtimeChanging(System.DateTime value);
    partial void OnMtimeChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public TblContent()
		{
			this._TblRecoveryPointContent = new EntitySet<TblRecoveryPointContent>(new Action<TblRecoveryPointContent>(this.attach_TblRecoveryPointContent), new Action<TblRecoveryPointContent>(this.detach_TblRecoveryPointContent));
			this._TblDirectory = default(EntityRef<TblDirectory>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="directoryid", Storage="_Directoryid", DbType="Int NOT NULL")]
		public int Directoryid
		{
			get
			{
				return this._Directoryid;
			}
			set
			{
				if ((this._Directoryid != value))
				{
					this.OnDirectoryidChanging(value);
					this.SendPropertyChanging();
					this._Directoryid = value;
					this.SendPropertyChanged("Directoryid");
					this.OnDirectoryidChanged();
				}
			}
		}
		
		[Column(Name="checksum", Storage="_Checksum", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Checksum
		{
			get
			{
				return this._Checksum;
			}
			set
			{
				if ((this._Checksum != value))
				{
					this.OnChecksumChanging(value);
					this.SendPropertyChanging();
					this._Checksum = value;
					this.SendPropertyChanged("Checksum");
					this.OnChecksumChanged();
				}
			}
		}
		
		[Column(Name="size", Storage="_Size", DbType="BigInt NOT NULL")]
		public long Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Name="atime", Storage="_Atime", DbType="DateTime NOT NULL")]
		public System.DateTime Atime
		{
			get
			{
				return this._Atime;
			}
			set
			{
				if ((this._Atime != value))
				{
					this.OnAtimeChanging(value);
					this.SendPropertyChanging();
					this._Atime = value;
					this.SendPropertyChanged("Atime");
					this.OnAtimeChanged();
				}
			}
		}
		
		[Column(Name="mtime", Storage="_Mtime", DbType="DateTime NOT NULL")]
		public System.DateTime Mtime
		{
			get
			{
				return this._Mtime;
			}
			set
			{
				if ((this._Mtime != value))
				{
					this.OnMtimeChanging(value);
					this.SendPropertyChanging();
					this._Mtime = value;
					this.SendPropertyChanged("Mtime");
					this.OnMtimeChanged();
				}
			}
		}
		
		[Column(Name="data", Storage="_Data", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="TblContent_TblRecoveryPointContent", Storage="_TblRecoveryPointContent", ThisKey="Id", OtherKey="Contentid")]
		public EntitySet<TblRecoveryPointContent> TblRecoveryPointContent
		{
			get
			{
				return this._TblRecoveryPointContent;
			}
			set
			{
				this._TblRecoveryPointContent.Assign(value);
			}
		}
		
		[Association(Name="TblDirectory_TblContent", Storage="_TblDirectory", ThisKey="Directoryid", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public TblDirectory TblDirectory
		{
			get
			{
				return this._TblDirectory.Entity;
			}
			set
			{
				TblDirectory previousValue = this._TblDirectory.Entity;
				if (((previousValue != value) 
							|| (this._TblDirectory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblDirectory.Entity = null;
						previousValue.TblContent.Remove(this);
					}
					this._TblDirectory.Entity = value;
					if ((value != null))
					{
						value.TblContent.Add(this);
						this._Directoryid = value.Id;
					}
					else
					{
						this._Directoryid = default(int);
					}
					this.SendPropertyChanged("TblDirectory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblRecoveryPointContent(TblRecoveryPointContent entity)
		{
			this.SendPropertyChanging();
			entity.TblContent = this;
		}
		
		private void detach_TblRecoveryPointContent(TblRecoveryPointContent entity)
		{
			this.SendPropertyChanging();
			entity.TblContent = null;
		}
	}
	
	[Table(Name="tblDirectory")]
	public partial class TblDirectory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Parentid;
		
		private string _Name;
		
		private bool _Isfile;
		
		private EntitySet<TblContent> _TblContent;
		
		private EntitySet<TblDirectory> _Dirindir;
		
		private EntityRef<TblDirectory> _Parent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParentidChanging(System.Nullable<int> value);
    partial void OnParentidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsfileChanging(bool value);
    partial void OnIsfileChanged();
    #endregion
		
		public TblDirectory()
		{
			this._TblContent = new EntitySet<TblContent>(new Action<TblContent>(this.attach_TblContent), new Action<TblContent>(this.detach_TblContent));
			this._Dirindir = new EntitySet<TblDirectory>(new Action<TblDirectory>(this.attach_Dirindir), new Action<TblDirectory>(this.detach_Dirindir));
			this._Parent = default(EntityRef<TblDirectory>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="parentid", Storage="_Parentid", DbType="Int")]
		public System.Nullable<int> Parentid
		{
			get
			{
				return this._Parentid;
			}
			set
			{
				if ((this._Parentid != value))
				{
					this.OnParentidChanging(value);
					this.SendPropertyChanging();
					this._Parentid = value;
					this.SendPropertyChanged("Parentid");
					this.OnParentidChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="isfile", Storage="_Isfile", DbType="Bit NOT NULL")]
		public bool Isfile
		{
			get
			{
				return this._Isfile;
			}
			set
			{
				if ((this._Isfile != value))
				{
					this.OnIsfileChanging(value);
					this.SendPropertyChanging();
					this._Isfile = value;
					this.SendPropertyChanged("Isfile");
					this.OnIsfileChanged();
				}
			}
		}
		
		[Association(Name="TblDirectory_TblContent", Storage="_TblContent", ThisKey="Id", OtherKey="Directoryid")]
		public EntitySet<TblContent> TblContent
		{
			get
			{
				return this._TblContent;
			}
			set
			{
				this._TblContent.Assign(value);
			}
		}
		
		[Association(Name="TblDirectory_TblDirectory", Storage="_Dirindir", ThisKey="Id", OtherKey="Parentid")]
		public EntitySet<TblDirectory> Dirindir
		{
			get
			{
				return this._Dirindir;
			}
			set
			{
				this._Dirindir.Assign(value);
			}
		}
		
		[Association(Name="TblDirectory_TblDirectory", Storage="_Parent", ThisKey="Parentid", OtherKey="Id", IsForeignKey=true)]
		public TblDirectory Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				TblDirectory previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Dirindir.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Dirindir.Add(this);
						this._Parentid = value.Id;
					}
					else
					{
						this._Parentid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblContent(TblContent entity)
		{
			this.SendPropertyChanging();
			entity.TblDirectory = this;
		}
		
		private void detach_TblContent(TblContent entity)
		{
			this.SendPropertyChanging();
			entity.TblDirectory = null;
		}
		
		private void attach_Dirindir(TblDirectory entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Dirindir(TblDirectory entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}
	
	[Table(Name="tblRecoveryPoint")]
	public partial class TblRecoveryPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _Rptime;
		
		private EntitySet<TblRecoveryPointLine> _TblRecoveryPointLine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRptimeChanging(System.DateTime value);
    partial void OnRptimeChanged();
    #endregion
		
		public TblRecoveryPoint()
		{
			this._TblRecoveryPointLine = new EntitySet<TblRecoveryPointLine>(new Action<TblRecoveryPointLine>(this.attach_TblRecoveryPointLine), new Action<TblRecoveryPointLine>(this.detach_TblRecoveryPointLine));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="rptime", Storage="_Rptime", DbType="DateTime NOT NULL")]
		public System.DateTime Rptime
		{
			get
			{
				return this._Rptime;
			}
			set
			{
				if ((this._Rptime != value))
				{
					this.OnRptimeChanging(value);
					this.SendPropertyChanging();
					this._Rptime = value;
					this.SendPropertyChanged("Rptime");
					this.OnRptimeChanged();
				}
			}
		}
		
		[Association(Name="TblRecoveryPoint_TblRecoveryPointLine", Storage="_TblRecoveryPointLine", ThisKey="Id", OtherKey="Recoverypointid")]
		public EntitySet<TblRecoveryPointLine> TblRecoveryPointLine
		{
			get
			{
				return this._TblRecoveryPointLine;
			}
			set
			{
				this._TblRecoveryPointLine.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblRecoveryPointLine(TblRecoveryPointLine entity)
		{
			this.SendPropertyChanging();
			entity.TblRecoveryPoint = this;
		}
		
		private void detach_TblRecoveryPointLine(TblRecoveryPointLine entity)
		{
			this.SendPropertyChanging();
			entity.TblRecoveryPoint = null;
		}
	}
	
	[Table(Name="tblRecoveryPointContent")]
	public partial class TblRecoveryPointContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Recoverypointlineid;
		
		private int _Contentid;
		
		private EntityRef<TblContent> _TblContent;
		
		private EntityRef<TblRecoveryPointLine> _TblRecoveryPointLine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRecoverypointlineidChanging(int value);
    partial void OnRecoverypointlineidChanged();
    partial void OnContentidChanging(int value);
    partial void OnContentidChanged();
    #endregion
		
		public TblRecoveryPointContent()
		{
			this._TblContent = default(EntityRef<TblContent>);
			this._TblRecoveryPointLine = default(EntityRef<TblRecoveryPointLine>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="recoverypointlineid", Storage="_Recoverypointlineid", DbType="Int NOT NULL")]
		public int Recoverypointlineid
		{
			get
			{
				return this._Recoverypointlineid;
			}
			set
			{
				if ((this._Recoverypointlineid != value))
				{
					this.OnRecoverypointlineidChanging(value);
					this.SendPropertyChanging();
					this._Recoverypointlineid = value;
					this.SendPropertyChanged("Recoverypointlineid");
					this.OnRecoverypointlineidChanged();
				}
			}
		}
		
		[Column(Name="contentid", Storage="_Contentid", DbType="Int NOT NULL")]
		public int Contentid
		{
			get
			{
				return this._Contentid;
			}
			set
			{
				if ((this._Contentid != value))
				{
					this.OnContentidChanging(value);
					this.SendPropertyChanging();
					this._Contentid = value;
					this.SendPropertyChanged("Contentid");
					this.OnContentidChanged();
				}
			}
		}
		
		[Association(Name="TblContent_TblRecoveryPointContent", Storage="_TblContent", ThisKey="Contentid", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public TblContent TblContent
		{
			get
			{
				return this._TblContent.Entity;
			}
			set
			{
				TblContent previousValue = this._TblContent.Entity;
				if (((previousValue != value) 
							|| (this._TblContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblContent.Entity = null;
						previousValue.TblRecoveryPointContent.Remove(this);
					}
					this._TblContent.Entity = value;
					if ((value != null))
					{
						value.TblRecoveryPointContent.Add(this);
						this._Contentid = value.Id;
					}
					else
					{
						this._Contentid = default(int);
					}
					this.SendPropertyChanged("TblContent");
				}
			}
		}
		
		[Association(Name="TblRecoveryPointLine_TblRecoveryPointContent", Storage="_TblRecoveryPointLine", ThisKey="Recoverypointlineid", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public TblRecoveryPointLine TblRecoveryPointLine
		{
			get
			{
				return this._TblRecoveryPointLine.Entity;
			}
			set
			{
				TblRecoveryPointLine previousValue = this._TblRecoveryPointLine.Entity;
				if (((previousValue != value) 
							|| (this._TblRecoveryPointLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblRecoveryPointLine.Entity = null;
						previousValue.TblRecoveryPointContent.Remove(this);
					}
					this._TblRecoveryPointLine.Entity = value;
					if ((value != null))
					{
						value.TblRecoveryPointContent.Add(this);
						this._Recoverypointlineid = value.Id;
					}
					else
					{
						this._Recoverypointlineid = default(int);
					}
					this.SendPropertyChanged("TblRecoveryPointLine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="tblRecoveryPointLine")]
	public partial class TblRecoveryPointLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Recoverypointid;
		
		private string _Recoverypath;
		
		private bool _Recoveryisfile;
		
		private string _Restorepath;
		
		private EntitySet<TblRecoveryPointContent> _TblRecoveryPointContent;
		
		private EntityRef<TblRecoveryPoint> _TblRecoveryPoint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRecoverypointidChanging(int value);
    partial void OnRecoverypointidChanged();
    partial void OnRecoverypathChanging(string value);
    partial void OnRecoverypathChanged();
    partial void OnRecoveryisfileChanging(bool value);
    partial void OnRecoveryisfileChanged();
    partial void OnRestorepathChanging(string value);
    partial void OnRestorepathChanged();
    #endregion
		
		public TblRecoveryPointLine()
		{
			this._TblRecoveryPointContent = new EntitySet<TblRecoveryPointContent>(new Action<TblRecoveryPointContent>(this.attach_TblRecoveryPointContent), new Action<TblRecoveryPointContent>(this.detach_TblRecoveryPointContent));
			this._TblRecoveryPoint = default(EntityRef<TblRecoveryPoint>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="recoverypointid", Storage="_Recoverypointid", DbType="Int NOT NULL")]
		public int Recoverypointid
		{
			get
			{
				return this._Recoverypointid;
			}
			set
			{
				if ((this._Recoverypointid != value))
				{
					this.OnRecoverypointidChanging(value);
					this.SendPropertyChanging();
					this._Recoverypointid = value;
					this.SendPropertyChanged("Recoverypointid");
					this.OnRecoverypointidChanged();
				}
			}
		}
		
		[Column(Name="recoverypath", Storage="_Recoverypath", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Recoverypath
		{
			get
			{
				return this._Recoverypath;
			}
			set
			{
				if ((this._Recoverypath != value))
				{
					this.OnRecoverypathChanging(value);
					this.SendPropertyChanging();
					this._Recoverypath = value;
					this.SendPropertyChanged("Recoverypath");
					this.OnRecoverypathChanged();
				}
			}
		}
		
		[Column(Name="recoveryisfile", Storage="_Recoveryisfile", DbType="Bit NOT NULL")]
		public bool Recoveryisfile
		{
			get
			{
				return this._Recoveryisfile;
			}
			set
			{
				if ((this._Recoveryisfile != value))
				{
					this.OnRecoveryisfileChanging(value);
					this.SendPropertyChanging();
					this._Recoveryisfile = value;
					this.SendPropertyChanged("Recoveryisfile");
					this.OnRecoveryisfileChanged();
				}
			}
		}
		
		[Column(Name="restorepath", Storage="_Restorepath", DbType="NVarChar(255)")]
		public string Restorepath
		{
			get
			{
				return this._Restorepath;
			}
			set
			{
				if ((this._Restorepath != value))
				{
					this.OnRestorepathChanging(value);
					this.SendPropertyChanging();
					this._Restorepath = value;
					this.SendPropertyChanged("Restorepath");
					this.OnRestorepathChanged();
				}
			}
		}
		
		[Association(Name="TblRecoveryPointLine_TblRecoveryPointContent", Storage="_TblRecoveryPointContent", ThisKey="Id", OtherKey="Recoverypointlineid")]
		public EntitySet<TblRecoveryPointContent> TblRecoveryPointContent
		{
			get
			{
				return this._TblRecoveryPointContent;
			}
			set
			{
				this._TblRecoveryPointContent.Assign(value);
			}
		}
		
		[Association(Name="TblRecoveryPoint_TblRecoveryPointLine", Storage="_TblRecoveryPoint", ThisKey="Recoverypointid", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public TblRecoveryPoint TblRecoveryPoint
		{
			get
			{
				return this._TblRecoveryPoint.Entity;
			}
			set
			{
				TblRecoveryPoint previousValue = this._TblRecoveryPoint.Entity;
				if (((previousValue != value) 
							|| (this._TblRecoveryPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblRecoveryPoint.Entity = null;
						previousValue.TblRecoveryPointLine.Remove(this);
					}
					this._TblRecoveryPoint.Entity = value;
					if ((value != null))
					{
						value.TblRecoveryPointLine.Add(this);
						this._Recoverypointid = value.Id;
					}
					else
					{
						this._Recoverypointid = default(int);
					}
					this.SendPropertyChanged("TblRecoveryPoint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblRecoveryPointContent(TblRecoveryPointContent entity)
		{
			this.SendPropertyChanging();
			entity.TblRecoveryPointLine = this;
		}
		
		private void detach_TblRecoveryPointContent(TblRecoveryPointContent entity)
		{
			this.SendPropertyChanging();
			entity.TblRecoveryPointLine = null;
		}
	}
}
#pragma warning restore 1591
