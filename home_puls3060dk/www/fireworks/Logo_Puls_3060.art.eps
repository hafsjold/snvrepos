%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8%%For: (ag ) ()%%Title: (Logo, Puls 3060.art)%%CreationDate: (1/15/03) (11:09 AM)%%BoundingBox: 21 22 309 196%%HiResBoundingBox: 21.9746 22.7002 308.2002 195.7998%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Black&White%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 2 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 166.5 108.5 166.5 108.5%AI3_TileBox: 0 0 538 781%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595 842%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -625.5 588.5 1 1594 981 18 0 1 3 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%%AI3_PaperRect:-29 812 566 -30%%AI3_Margin:29 -31 -28 30%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Undo New Calligraphic Brush) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A0 O0 g800 Ar2 J 0 j 0 w 2 M []0 d%AI3_Note:0 D0 XR84 195.3999 m85.2998 194.7002 87.7002 195.7002 88.8999 194.5 C92.2002 194.7998 95.1001 193.8999 98.2998 194.2998 C99 193.1001 100.8999 194.1001 101.7998 193.3999 C102.6001 193.7998 102.8999 192.8999 103.7002 193 C105.3999 192.2002 107.1001 193.5 108.7998 192.1001 C110 192.3999 110.5 191.5 111.5 191.8999 C112.6001 190.8999 114.3999 191.5 115.2998 190.3999 C118.6001 189.6001 122.7998 189.2998 123.7998 185.5 C125.6001 184 125.5 181.1001 124.8999 179.2998 C124.8999 178.2998 123.2998 177.3999 123.5 176 C122.7002 174 120.7998 173.3999 120 171.5 C119.3999 171.5 118.6001 171.1001 118.6001 170.2998 C115.8999 168.6001 113.8999 167.6001 111.5 165.6001 C107.7998 164.3999 104.1001 161.3999 99.7002 160.2998 C97.2002 158.7998 95.5 158 93 156.3999 C91.5 156.6001 91.7002 155 90.2002 155.2002 C89.7002 153.7002 88.7998 153 89.2002 151.2002 C87.6001 148.2002 89.2002 145.1001 88 142.1001 C87.7998 140.2998 88.5 138.3999 87.5 137 C88.1001 135.7002 87.1001 134.6001 87.6001 133.2002 C86.2998 131.7002 87.7002 129.7002 86.7998 128.2002 C86.1001 127.2002 86.2998 125.6001 85.2002 124.7002 C85.2002 123.6001 83.7002 122.6001 83 121.7002 C81.5 120.7002 79.6001 121.7998 78.1001 120.6001 C76.2002 120.8999 74.2998 119.5 72.7002 120.7998 C72.8999 122.5 72.2998 124.1001 73.2002 125.3999 C73.3999 126.5 72.6001 127.7002 73.6001 128.3999 C73.3999 130.7002 73.7998 132.5 73.7998 135 C74.8999 135.6001 73.5 136.8999 74.6001 137.7998 C74.7998 140.7998 74.8999 143.2002 75.3999 146.2002 C75.7998 147.3999 76.1001 149.2998 75.7002 150.5 C73.7002 150.5 72.7998 148.5 70.7998 148.6001 C70.5 147.6001 69.7998 148.6001 69.3999 148 C67.7998 147.3999 65.8999 146.2002 64.2998 146 C63.6001 145 61.7002 145.6001 60.7998 144.6001 C59.6001 144.7002 59.6001 143.3999 58.2002 143.8999 C57.1001 142.7998 55.3999 142.8999 54.1001 142.7998 C53.5 141.7998 52.2998 142.3999 51.6001 141.3999 C48.2002 141.7998 46.2998 139.2998 43 139.2002 C42 138.2998 40.7002 138.6001 39.6001 137.7998 C37.6001 137 34.8999 137.5 33 136 C30.7998 136.1001 29.3999 134.7998 27.1001 134.8999 c25 134.3999 24.2998 135.1001 22.7002 136.2002 C21.2998 137.2998 22.2998 139.2998 22.2998 140.5 C23.6001 142 24.3999 144.3999 26.6001 144.5 C27.5 145.5 28.8999 145.2002 30 145.7002 C31.8999 146.8999 34.6001 147.5 36.7002 148.1001 C38.2002 149 39.8999 149.1001 41.3999 150.3999 C42.7002 150.1001 43.6001 151.7998 45 151.3999 C46.2998 151.7002 47.2002 153.2998 48.7002 152.8999 C49.7998 152.7998 50.2002 154.2002 51.3999 153.7998 C53.8999 154.7998 56.1001 155.7998 58.7998 156.6001 C59.5 157.2002 60.5 157.2998 61.2002 157.7998 C62.7002 158 64.5 158.6001 65.6001 159.6001 C66.6001 159.3999 66.7002 160.3999 67.6001 160.6001 C69.1001 160.2002 69.6001 161.6001 71.2002 161.6001 C72.8999 163.3999 75.7002 162.3999 77.3999 164.2998 C78.2002 164 78.7002 164.7002 79.1001 165.2002 C79.1001 166.7998 80.2002 168.1001 79.7998 169.7998 C80.3999 171.7002 79.6001 174.6001 80.3999 176.2998 C80.3999 180.5 L80.8999 181.7002 81 183.3999 80.7998 184.6001 C79.7998 185 L77.2002 184.7002 73.3999 185.2998 70.1001 184.6001 C69 185 68.2998 184.7998 67.2998 184.6001 C62.1001 185.3999 56.1001 183.5 51.3999 187.3999 C50.7002 188.7002 50.5 190.3999 51.5 191.7998 C54.1001 193.8999 57 194.8999 60.1001 194.7998 c62.3999 195.2998 64.3999 194.5 66.3999 195.7002 C66.8999 194.7998 67.5 195.6001 68.2002 195.6001 C70.8999 195.5 73.6001 195.7002 76.1001 195.7998 C78.3999 194.3999 81.5 195.5 84 195.3999 Cf148.1001 188.8999 m148.8999 186 L147.6001 183.5 148.6001 180 147.1001 177.7002 C147.7002 175.6001 145.7002 173.8999 146 171.5 c145.7002 169.6001 144.7998 167.8999 144.5 166 c144.2002 164.6001 143 163.2002 143.6001 161.7998 C142.8999 160.3999 143.2002 158.7002 142.2002 157.3999 C141.7998 153 140.2002 149 139 145 C138.7998 142.7002 137.1001 140.2998 139.1001 138.5 C140.6001 138.7998 L140.5 138.7002 L141.7998 138.2002 142.5 139.7998 143.8999 139.8999 C145 139.7002 145.5 140.8999 146.6001 140.2998 C148.2002 140.1001 148.5 138.7998 148.8999 137.5 C148.7002 135.2998 146.5 134.2998 145.2998 132.5 C141.7998 128.3999 137 128.3999 132.2002 129.5 C131.3999 129.8999 130.1001 130.1001 129.1001 130.2002 C128.2002 130.6001 128.3999 128.8999 127.2998 129.1001 C125.2998 126.2002 121.2002 126.5 118.3999 127.1001 C117.7002 127.1001 117.2002 128 116.3999 127.7002 C115.3999 129 113.6001 129.7998 112.7002 131.2002 C110.7002 130.3999 109.2002 128.8999 107.5 127.8999 c104.7998 126.7998 101.8999 125.3999 99.1001 126.7998 C98 128 96.7002 128.8999 95.7998 130.2002 C96 130.3999 L91.6001 138.2998 96.5 146.2002 98.5 154 c98.8999 156.6001 100.8999 159.2002 103.2002 160.3999 C104.5 160.3999 106.8999 162 108 160.1001 C107.8999 158.7998 109.6001 157.6001 107.7998 156.6001 C108.2002 154.1001 106.1001 152 105.7998 149.5 c104.7002 146.6001 103.7002 143.5 103.8999 140.2002 C104 139.6001 104.6001 139 105.1001 138.7998 C106.7002 138.6001 108.2998 139.1001 108.7998 140.6001 c110.7002 142.3999 110.1001 145.2002 111.7002 147.1001 C111.5 149.3999 113.2002 151 113.3999 153 C114.6001 154 113.8999 155 115 156 C116.2998 159.1001 117 161.8999 119.2998 164 C121.1001 164.2998 122.2998 163.7998 123.6001 163 C124.6001 162.1001 124.2998 160.3999 124.2998 159.2002 C123 155.5 123.2998 151.1001 121.2002 147.6001 C120.5 145.5 120.3999 143 119.6001 141 C119.3999 139.6001 120.7998 138.6001 121.7998 137.8999 C123.7002 137.7998 125.7998 137.2002 127.1001 139.1001 C128.1001 141.1001 130 142.7002 130.1001 145.1001 C130.7002 145.8999 130.2002 147.2998 131.2998 148 C130.6001 149.7002 132 151.1001 132.1001 153 c134.3999 163.7002 136.8999 174 140.2002 184.6001 C141.5 187.2002 143.1001 190.6001 146.8999 190.2002 C148.1001 188.8999 Lf1 g102.2002 183.3999 m104.7002 183.2002 106.2998 183.2998 109.1001 182.7998 C109.5 182.2002 110.5 182.2002 110.6001 181.2998 C111 178.7002 108.2998 177.2002 106.6001 175.7998 C102.1001 174.5 98.7002 170.7002 94.1001 169.7998 C93.7002 169.2002 92.8999 168.8999 92.2998 169.2002 C91.7002 169.8999 L92 175.3999 L93.1001 176.1001 91.8999 177.3999 92.6001 178.2002 C92.7002 179.5 93.7002 179.7998 93.3999 181.2002 C93.7002 182.2998 94.7002 183.6001 95.2998 184.2002 C97.7002 183.2002 99.8999 184.7002 102.2002 183.3999 Cf0 g176.5 163.7002 m176.8999 161.5 176.5 160.5 175.2002 158.8999 C171.5 157.7002 168.6001 154.7002 165.1001 153.1001 C163.2998 151.2002 161.8999 148.7002 162.3999 146.2002 C164.3999 143.5 167.7002 144.5 170.2998 143.7998 c173.6001 143.6001 L175.2998 142.2998 177.5 141.3999 179 139.8999 C178.7998 139.2002 179.6001 139 180.1001 138.6001 C181.2002 136 183.1001 133.2998 182.5 130.1001 C182.6001 129.1001 182.8999 128.2002 182.7998 127.2002 C182.8999 125.3999 181.7002 124 181.3999 122.5 C180.3999 119.2998 178.8999 116.7998 177 114.1001 C175.3999 112.7002 174.5 110.2002 172.3999 109.1001 c170.8999 107.2002 169.6001 105.2998 167.7998 103.6001 C167.3999 102.7002 166.5 102.2002 166 101.3999 C164.2998 99.1001 162 96.2998 160.2002 93.7998 c158.1001 90.6001 155.6001 87.7998 154.1001 84.2002 C152.6001 81.2002 150.5 79 149.2002 75.7002 C148 74.7998 147.8999 73.2998 147.1001 72.1001 C146.2002 70.7002 144.7002 69.3999 144.3999 67.7998 C143.2002 66.2998 142.7998 64.5 142 62.7998 c140.6001 60.3999 139.1001 57.7002 136.8999 56 C136.6001 56.3999 136.3999 55.7002 136.1001 55.7002 C135 55.7002 133.6001 56 132.7002 56.7998 C131.2002 58.5 132 61 132.2002 63.1001 C132.2998 64.8999 133.3999 66.7002 133.6001 68.3999 C136.1001 73.7998 137.3999 80.2002 141.2002 84.7998 C141.7998 86.2998 L141.7002 86.2002 141.7002 86.2998 141.6001 86.3999 C143.6001 88.1001 143.6001 90.7998 145.7002 92.3999 C144.8999 93.7002 146.7002 93.7002 146.8999 94.7998 c148 96.3999 148.8999 98.7998 150.7002 100.1001 C152.2002 103 154.3999 104.3999 155.7998 106.7998 C157.2002 107.6001 158.1001 109.2998 159.5 110.2998 C161.2998 110.5 161.5 112.3999 163 113 C163 113.5 L165.5 115.5 166.8999 117.7998 168.3999 120.1001 C169.1001 122.1001 168.7998 124.6001 169.7002 126 C170 128.6001 168.5 130.5 166.7002 132 C163 134.7002 158 133.3999 154.1001 135.7002 C153 137.1001 151.2002 136.8999 150.2002 138.2002 C148.3999 140.7998 146.3999 143.1001 147 146.2998 C147.8999 149.6001 149.7002 152.7998 152.3999 154.7002 C155.7002 159.8999 161.6001 162.7998 167.2998 165.2002 c168.2998 165.7002 169.5 165.2998 170.7998 165.6001 C171.5 166.7002 172.6001 165 173.3999 165.6001 C176.5 163.7002 Lf255.7998 130 m264.6001 130 270.2002 130.2998 278.8999 130.2002 C279.3999 129.7002 L282.5 130.1001 285.5 129.5 288.2002 129.6001 C288.7002 129.1001 L291.3999 129.1001 293.6001 129.2002 295.8999 129 C296.5 129.5 296.7002 128.7002 297.1001 128.5 C299.7002 129 301.7998 128.2002 304.1001 128.2998 C304.8999 126.7002 306.7002 127.8999 308.2002 127.2002 C308.2002 126.7002 L301.2998 125.6001 295 122.6001 288.2002 122.2002 c283.7998 121.1001 278.2002 120.3999 273.3999 119.5 C273 118.5 271.7002 119.1001 271.2002 118.6001 C271 118.6001 271 118.3999 270.7998 118.2998 C271.1001 118.2002 271.1001 117.8999 271.1001 117.6001 C265.2002 115.6001 259.1001 115.7998 253.2002 114.2002 c250.7998 113.8999 248.3999 114 246.5 113.2998 C242.7002 112.8999 238.5 113.5 235 112.3999 C230.7002 112 227.2998 112.1001 223 111.7002 C221.7998 112.3999 220.3999 111.2002 219.1001 111.5 C217.3999 111.3999 215.5 111.7998 213.6001 111 C212.6001 111 211.6001 111.6001 210.6001 110.8999 C209.2002 111.3999 207.8999 110.3999 206.2998 110.6001 c203.2002 110.5 200 110.2002 196.7998 110.5 C194.5 109.2002 193 110.7002 190.7002 110.6001 C188.5 113 183.2002 114.6001 185.2998 118.7998 C185 120.7998 187.1001 121.3999 187.7998 122.8999 C190.3999 124.7002 193.5 125.2998 196.2998 126.7998 C198 126.7002 199.6001 127.5 201.1001 127.1001 C204.3999 129.3999 207.2002 127.2002 210.6001 128 c212 128.3999 213.6001 127.2002 214.8999 128.2002 C219.5 129.1001 224.2998 128.2998 228.7998 129.2002 c232.7998 129.7002 236.7998 129.7002 240.7998 130.2998 C241.8999 129.8999 243 130.5 244.2002 130.2998 C245.1001 130.2998 246.1001 130.8999 247 130.2998 C255.7998 130 lf156.7002 124.3999 m155.3999 121.2998 151.6001 121.7998 148.8999 120.7002 C146.7998 118 143.1001 118.5 140.2002 117.5 c137.7998 118.1001 136.7998 115 134.5 115.3999 c127.7998 114 121.6001 112.6001 114.5 111.6001 c109.5 110.7998 104.2998 109.3999 99.1001 109.1001 C99.1001 109 L95.3999 108.2998 91.6001 107.3999 87.7002 106.8999 c85.7002 105.7002 83.6001 106.7998 81.3999 106.1001 c72.3999 104.7002 63.1001 102.8999 53.8999 100.8999 C51.7998 101.6001 50 99.7002 47.8999 100.2002 c46.8999 100.2002 46.2002 99.7998 45.5 99.2002 C40.7998 98.6001 37.7998 99 33.5 98.8999 C32.2998 99.6001 30.7002 99.7998 29.8999 101.2002 C28.2002 104.1001 28.7998 107.2002 30.7002 109.7002 C32.5 113.2002 37.7002 110.7002 40.7002 112.3999 C44.6001 112.7998 48.6001 113.1001 52.3999 113.6001 C53.3999 114.7998 55.2002 114.3999 56.3999 114.7998 C57.3999 113.7002 58.2002 116.1001 59 114.7002 C63.7002 116 68.8999 116.1001 73.6001 117.3999 c75.7002 117.6001 77.8999 117.8999 79.8999 118.3999 C81.8999 117.3999 83.2002 119.7998 85.2998 119.2002 c86.8999 119.3999 89.1001 119 90.6001 120 C92.8999 119.7002 94.7002 120.5 97 120.2002 C97.2998 120.7998 L101 120.5 104.1001 121.5 106.8999 121 C108.6001 121.6001 110.2002 121.5 112.2002 121.7002 c115.7998 122.1001 120.6001 121.8999 123.6001 122.2998 C124.8999 123.2002 126.3999 122.3999 128.2002 122.6001 C129.1001 123.2998 130.6001 122.2998 131.5 123.5 C135.5 123.2998 138.5 123.7002 142.1001 124 C143.1001 125.2002 145 124.1001 146.5 124.3999 c148 124.8999 149.3999 124.5 150.7002 125.2998 C152.7002 124.7002 154.7002 125.7002 156.5 125.2002 C156.7002 124.3999 Lf131.6001 100.6001 m132.8999 97.6001 133.2002 94.2002 133.2002 91.2002 C133.1001 87 132.5 83.2998 131.2002 79.7998 c129.1001 76.7998 129.1001 73.2998 126.5 70.7002 C125.1001 68.6001 123.7998 66.7002 121.3999 65.7998 C118.6001 63.7002 114.8999 61.2998 111.6001 63.5 C109.3999 63.6001 107.7998 65 105.6001 65.5 C102.6001 67.5 102.1001 71.2002 101.6001 74.6001 C102.2002 82.2998 105.5 89.2002 109.6001 95.6001 C110.1001 97 111.7998 98.5 112.3999 100.2002 c113.7002 101.7002 114.8999 102.5 115.8999 104.2002 C116.7002 104.2002 117.2002 105.2002 118 105.5 C120.1001 106.2998 122.6001 106.2998 125 106.3999 C125.7998 106.2002 126.6001 105.2998 127.2998 105.2002 C129.3999 104.1001 130.2998 102.2998 131.6001 100.6001 Cf92 101.6001 m94.5 101.2002 96.7998 99.5 98.2998 97.2002 C97.7002 95 98.6001 92.6001 96.2002 90.7002 C96.3999 88.8999 94.2002 89.5 94 87.7998 C92.7002 87.3999 91.7002 86.3999 90.7002 85.3999 C92.2998 83.2998 95.2998 83.5 96.7002 80.8999 C99.7998 79.2998 97.8999 74.7998 98.2998 72.3999 C96.5 66.7998 94.2998 61.5 91.3999 56.5 C91.5 56.2002 91.3999 56 91.1001 55.8999 C89.6001 50.7998 84.7002 46.1001 81.7998 41.2998 c79 35.8999 74.1001 31.1001 69.7998 26.3999 C67.5 24.3999 65 22.8999 61.8999 22.7002 C61.3999 23 60.5 23.5 60.3999 24.2002 C60.1001 26.7002 61.5 28.3999 61.7002 30.6001 C63 31.8999 62.8999 33.8999 64.1001 35.2998 C69.7998 42.2002 L70.3999 42.2002 70.8999 42.7998 71.2002 43.2002 C71.2002 43.7002 L77.5 52 83.5 60.3999 86.6001 70.1001 C86.7002 72.5 85.7998 74.7002 83.6001 76 C78.5 76.6001 75 72.3999 70 71.8999 c68.2002 70.8999 65.8999 71.6001 64.3999 72.6001 C63.8999 73.6001 63.2998 75.2998 64.1001 76.2998 C65.1001 80.1001 69.1001 81.7002 72.6001 83.3999 C73.3999 83.1001 74 83.7998 74.3999 84.1001 C77.8999 85.7998 81.2002 87.7002 84.6001 90 C84.8999 90.5 85.2998 91.2002 85 91.7998 C83.7002 93.6001 81.3999 92.3999 79.7002 92.3999 C75.7998 90.7998 71.7998 89.2998 68.2998 86.7998 C66.2998 86.5 63.3999 85 61.7998 87.1001 C60.6001 88.7998 61 91.7002 61.8999 93.3999 C62.7002 94.7998 64.8999 94.7998 66 96.1001 c68.3999 97.7998 71.6001 98.7002 74 100 C75.2002 99.6001 75.6001 100.5 76.6001 100.2998 C78.5 101 80.2998 101.3999 82.6001 101.8999 C84.7998 102.6001 85.7998 102 88 102.7998 C89.2998 101.7002 90.7998 102.8999 92 101.6001 Cf193.8999 97.3999 m195.3999 93.7998 192.1001 91.7998 190.3999 89.3999 C190 88.5 188.7998 88 188.2002 87.5 C181.7002 80.5 L180.6001 78.5 179.5 76.7998 178.7998 74.6001 C177.3999 72.1001 174.8999 69.3999 174 66.3999 C173.8999 65.7002 174.5 65.2002 175 64.8999 C175.5 64.8999 176 64.8999 176.2998 65.3999 C176.6001 63.7002 178.6001 62.3999 179.5 61.1001 c180.8999 59.8999 181.6001 57.8999 183 57 C183.1001 55 185 54.3999 184.7998 52.2998 C185.6001 52 185.2002 51 185.2002 50.3999 C184.6001 50.1001 185.2002 49.6001 185.3999 49.3999 C186 47.8999 184.2998 46.7002 185 45.2002 C184.2002 44 185.2002 42.3999 184.2002 41.3999 c183.8999 40.6001 183.8999 39.7002 183.2002 39.1001 C183.2998 37.7998 182.7002 36.3999 182.5 35.3999 C181.8999 34.7002 181.7998 34.2002 181.2998 33.3999 C179.7002 30.8999 177.5 28.8999 175 27.2002 c172.2002 24.8999 168.8999 24.2998 165.1001 24 C164.6001 23 164.3999 24.3999 163.7002 24.2002 C161.6001 23.7998 159.2002 24.3999 158.2002 25.6001 c156 26.6001 L156.1001 26.7998 L154.8999 28.2002 152.3999 29.3999 151.7998 31.7002 C149.2002 34.7998 150.8999 38.7002 150.2002 42.6001 C150.3999 44.7002 151.8999 46.2998 152 48.3999 c154.6001 57.1001 159.7998 65.2998 164 72.7998 C165.8999 73.8999 165.7998 76.6001 167.6001 77.8999 C167.7998 79.2002 169.3999 79.3999 169.3999 80.7998 C170.8999 81.2998 171.5 82.7998 172.2998 84 c175.1001 88.6001 179.2998 92 182.8999 96.1001 C186 97.5 188.6001 101.8999 192.2002 99.3999 C193.8999 97.3999 Lf217.3999 92.2998 m218.1001 91.7998 218 90.6001 218.8999 90.2002 C219.7002 88.7998 220.2998 87 221.3999 86 C221.7998 84.3999 222.3999 83.1001 222.7002 81.5 C223.7998 81.1001 222.6001 79.7002 223.2998 79 c223.5 76.1001 223.6001 73.1001 222.7002 70.2998 C221.5 68.8999 222 66.7998 221 65.3999 c219.5 64.2998 220.6001 62.2002 219 61.2998 C217.5 59.1001 214.8999 57.6001 213.3999 55.2002 C210.8999 55.1001 209.7998 52.1001 206.8999 52.7002 C205.8999 51.7998 204 52.8999 203.2998 51.7002 C201.8999 51.3999 200.6001 51.5 199 51.7998 C197.2002 52.1001 196.3999 53.7998 194.6001 54 C194.3999 54.6001 193.6001 54.7998 193.1001 55.2002 C189 60.6001 189.5 69.6001 192.6001 74.6001 c195.3999 82.2998 200.7002 89 206.7998 94.2998 C207.6001 93.8999 207.1001 95.1001 207.7998 94.8999 C211.3999 95.7002 215.2998 95 217.3999 92.2998 Cf1 g123.7998 92.3999 m124.3999 86.5 123.2998 81 119.6001 76.7002 C118.2998 75.5 116.7998 74.7002 115 74.5 C114.1001 74.7002 113.2998 75.3999 112.8999 76.2002 C112.1001 82 113.8999 87.6001 117 92.2002 C118.2002 93 119 94.7998 120.5 94.7998 C122 95 123 93.3999 123.7998 92.3999 Cf211.7998 79.8999 m213.2002 76.6001 213.2998 71.8999 212.2002 68.3999 c212.1001 66.6001 210.5 65.2002 209.2998 64 C208.7998 63.7998 208.2002 63.6001 207.7002 63.7998 C207.2998 64.2998 207.1001 63.2998 206.5 63.5 C205 64.2002 202.7998 63.7002 202 65.7998 C201.1001 71.7002 204.8999 76 207.6001 80.5 C208.6001 82.2002 211.2002 81.5 211.7998 79.8999 Cf171.1001 53.2002 m174.5 49.7998 174.2002 44.2998 173.2998 40 C171.7998 38 169.7002 36.5 167.3999 35.8999 C165.1001 35.7002 162.7002 35.8999 161.7998 38.2998 C160.3999 44 162.7998 48.7002 165.2002 53.2002 C166 54.3999 167.6001 54.7998 168.7998 54.2002 C169.5 53.5 170.3999 53.7002 171.1001 53.2002 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF