%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 12.0.0
%%For: (Adobe) (Hafsjold Data ApS)
%%Title: (Nyhedsbrev-hoved2.eps)
%%CreationDate: 5/28/2006 1:15 AM
%%BoundingBox: 89 -23 653 50
%%HiResBoundingBox: 89 -23 652.2412 49.5
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBCustomColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 395.5 372.5 395.5 372.5
%AI3_TileBox: 107 -23 683 769
%AI3_DocumentPreview: PC_ColorTIFF
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -123 326 1 1089 939 26 1 0 279 176 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:90 -23
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(Layer 2) Ln
0 A
u
1 Ap
0 O
0.537255 0.282353 0.160784 0 0.486275 0.627451 0.737255 Xa
0 J 0 j 1 w 4 M []0 d0 XR
234 -3.25391 m
89 -3.25391 L
89 42.6504 L
234 42.6504 L
234 -3.25391 L
f
652.2412 -2.88965 m
334.1885 -2.88965 L
334.1885 43.0156 L
652.2412 43.0156 L
652.2412 -2.88965 L
f
*u
0 Ap
0 0 0 0 1 1 1 Xa
369.5483 8.17188 m
369.5483 35.2422 L
378.8623 35.2422 L
388.791 12.1104 L
388.791 35.2422 L
394.7246 35.2422 L
394.7246 8.17188 L
385.4097 8.17188 L
375.481 31.3037 L
375.481 8.17188 l
369.5483 8.17188 L
f
*U
*u
412.3789 9.03711 m
402.8809 26.9043 L
408.168 26.9043 L
414.9609 13.8008 L
421.7549 26.9043 L
427.042 26.9043 L
413.5166 1.08203 L
408.2295 1.08203 l
412.3789 9.03711 L
f
*U
*u
434.0313 8.17188 m
434.0313 35.2422 L
439.3184 35.2422 L
439.3184 25.1367 L
441.0801 26.7109 443.375 27.5 446.2031 27.5 c
450.9375 27.5 453.3047 25.7129 453.3047 22.1387 c
453.3047 8.17188 L
448.0176 8.17188 L
448.0176 22.1387 L
448.0176 23.1387 447.7305 23.8555 447.1563 24.291 c
446.582 24.7266 445.6094 24.9443 444.2363 24.9443 c
442.8428 24.9443 441.6738 24.6406 440.7324 24.0313 c
439.7891 23.4238 439.3184 22.7031 439.3184 21.8701 c
439.3184 8.17188 l
434.0313 8.17188 L
f
*U
*u
472.4043 27.5 m
478.8184 27.5 482.0254 25.2129 482.0254 20.6406 c
482.0254 16.9902 L
468.0391 16.9902 L
468.0391 14.4355 L
468.0391 12.8848 468.3672 11.7803 469.0225 11.1211 c
469.6777 10.4609 470.8047 10.1309 472.4043 10.1309 c
474.002 10.1309 475.125 10.4609 475.7695 11.1211 c
476.416 11.7803 476.7383 12.8848 476.7383 14.4355 c
482.0254 14.4355 L
482.0254 9.8623 478.8184 7.57617 472.4043 7.57617 c
465.9688 7.57617 462.752 9.8623 462.752 14.4355 c
462.752 20.6406 l
462.752 25.2129 465.9688 27.5 472.4043 27.5 c
f
1 D
468.0391 20.6406 m
468.0391 19.5449 L
476.7383 19.5449 L
476.7383 20.6406 L
476.7383 22.1904 476.416 23.2949 475.7695 23.9551 c
475.125 24.6143 474.002 24.9443 472.4043 24.9443 c
470.8047 24.9443 469.6777 24.6143 469.0225 23.9551 c
468.3672 23.2949 468.0391 22.1904 468.0391 20.6406 c
f
*U
*u
0 D
509.6094 8.17188 m
504.3223 8.17188 L
504.3223 9.70898 L
502.6416 8.28711 500.5615 7.57617 498.082 7.57617 c
495.582 7.57617 493.666 8.13281 492.334 9.24707 c
491.002 10.3613 490.3359 11.9824 490.3359 14.1084 c
490.3359 20.9668 L
490.3359 23.0938 491.002 24.7139 492.334 25.8281 c
493.666 26.9424 495.582 27.5 498.082 27.5 c
500.5615 27.5 502.6416 26.7891 504.3223 25.3672 c
504.3223 35.2422 L
509.6094 35.2422 l
509.6094 8.17188 L
f
1 D
495.623 14.1084 m
495.623 12.6992 495.9355 11.6836 496.5605 11.0625 c
497.1855 10.4414 498.2363 10.1309 499.7109 10.1309 c
501.0234 10.1309 502.1191 10.4316 503 11.0342 c
503.8809 11.6367 504.3223 12.3594 504.3223 13.2051 c
504.3223 21.8701 L
504.3223 22.7148 503.8809 23.4395 503 24.041 c
502.1191 24.6426 501.0234 24.9443 499.7109 24.9443 c
498.2363 24.9443 497.1855 24.6328 496.5605 24.0117 c
495.9355 23.3906 495.623 22.376 495.623 20.9668 c
495.623 14.1084 L
f
*U
*u
0 D
527.5723 27.5 m
530.2363 27.5 532.3828 27.041 534.0117 26.125 c
535.6406 25.209 536.4561 23.9766 536.4561 22.4277 c
536.4561 21.793 L
531.1689 21.793 L
531.1689 22.4277 L
531.1689 23.2344 530.8555 23.8555 530.2305 24.291 c
529.6055 24.7266 528.7197 24.9443 527.5723 24.9443 c
526.4863 24.9443 525.6152 24.7461 524.959 24.3486 c
524.3027 23.9512 523.9756 23.4395 523.9756 22.8115 c
523.9756 21.9854 L
523.9756 21.2041 524.7344 20.5635 526.25 20.0645 c
532.0293 18.124 L
535.2676 17.0605 536.8867 15.459 536.8867 13.3203 c
536.8867 12.6865 L
536.8867 11.124 536.0352 9.88086 534.335 8.95898 c
532.6338 8.03711 530.3799 7.57617 527.5723 7.57617 c
524.6006 7.57617 522.3047 8.0625 520.6865 9.03613 c
519.0674 10.0098 518.2578 11.4121 518.2578 13.2441 c
518.2578 14.2236 L
523.5449 14.2236 L
523.5449 13.2441 L
523.5449 11.1689 524.8877 10.1309 527.5723 10.1309 c
528.8428 10.1309 529.832 10.3555 530.5391 10.8037 c
531.2461 11.252 531.5996 11.8799 531.5996 12.6865 c
531.5996 13.3203 L
531.5996 14.2305 530.8203 14.9404 529.2627 15.4531 c
523.668 17.3359 L
520.3477 18.502 518.6885 20.0508 518.6885 21.9854 c
518.6885 22.8115 L
518.6885 24.1563 519.5234 25.2734 521.1934 26.1641 c
522.8633 27.0547 524.9902 27.5 527.5723 27.5 c
f
*U
*u
545.4434 8.17188 m
545.4434 35.2422 L
550.7305 35.2422 L
550.7305 25.3672 L
552.4102 26.7891 554.4902 27.5 556.9707 27.5 c
559.4707 27.5 561.3867 26.9424 562.7188 25.8281 c
564.0508 24.7139 564.7168 23.0938 564.7168 20.9668 c
564.7168 14.1084 L
564.7168 11.9824 564.0508 10.3613 562.7188 9.24707 c
561.3867 8.13281 559.4707 7.57617 556.9707 7.57617 c
554.4902 7.57617 552.4102 8.28711 550.7305 9.70898 c
550.7305 8.17188 l
545.4434 8.17188 L
f
1 D
555.3418 10.1309 m
556.8164 10.1309 557.8672 10.4414 558.4922 11.0625 c
559.1172 11.6836 559.4297 12.6992 559.4297 14.1084 c
559.4297 20.9668 L
559.4297 22.376 559.1172 23.3906 558.4922 24.0117 c
557.8672 24.6328 556.8164 24.9443 555.3418 24.9443 c
554.0293 24.9443 552.9336 24.6426 552.0527 24.041 c
551.1709 23.4395 550.7305 22.7148 550.7305 21.8701 c
550.7305 13.2051 L
550.7305 12.3594 551.1709 11.6367 552.0527 11.0342 c
552.9336 10.4316 554.0293 10.1309 555.3418 10.1309 c
f
*U
*u
0 D
574.165 8.17188 m
574.165 26.9043 L
579.4531 26.9043 L
579.4531 25.1367 L
580.2715 25.8662 581.3174 26.4424 582.5879 26.8652 c
583.8584 27.2881 585.1797 27.5 586.5527 27.5 c
586.5527 24.1563 L
584.3711 24.1563 L
582.9766 24.1563 581.8086 23.8516 580.8662 23.2441 c
579.9238 22.6348 579.4531 21.915 579.4531 21.082 c
579.4531 8.17188 l
574.165 8.17188 L
f
*U
*u
604.3926 27.5 m
610.8066 27.5 614.0146 25.2129 614.0146 20.6406 c
614.0146 16.9902 L
600.0283 16.9902 L
600.0283 14.4355 L
600.0283 12.8848 600.3555 11.7803 601.0117 11.1211 c
601.668 10.4609 602.7949 10.1309 604.3926 10.1309 c
605.9922 10.1309 607.1133 10.4609 607.7598 11.1211 c
608.4043 11.7803 608.7275 12.8848 608.7275 14.4355 c
614.0146 14.4355 L
614.0146 9.8623 610.8066 7.57617 604.3926 7.57617 c
597.958 7.57617 594.7402 9.8623 594.7402 14.4355 c
594.7402 20.6406 l
594.7402 25.2129 597.958 27.5 604.3926 27.5 c
f
1 D
600.0283 20.6406 m
600.0283 19.5449 L
608.7275 19.5449 L
608.7275 20.6406 L
608.7275 22.1904 608.4043 23.2949 607.7598 23.9551 c
607.1133 24.6143 605.9922 24.9443 604.3926 24.9443 c
602.7949 24.9443 601.668 24.6143 601.0117 23.9551 c
600.3555 23.2949 600.0283 22.1904 600.0283 20.6406 c
f
*U
*u
0 D
628.8711 8.17188 m
619.8955 26.9043 L
625.1211 26.9043 L
631.3926 13.8779 L
637.6934 26.9043 L
642.9199 26.9043 L
633.9121 8.17188 l
628.8711 8.17188 L
f
*U
u
0 g
2 J 0 w 2 M265.7422 49.3311 m
266.2861 49.0391 267.292 49.458 267.7939 48.9551 C
269.1768 49.0811 270.3906 48.7031 271.7314 48.8711 C
272.0244 48.3691 272.8198 48.7861 273.1973 48.4932 C
273.5332 48.6621 273.6582 48.2842 273.9927 48.3271 C
274.7051 47.9912 275.4175 48.5371 276.1294 47.9502 C
276.6313 48.0752 276.8408 47.7002 277.2603 47.8662 C
277.7202 47.4463 278.4746 47.7002 278.8506 47.2373 C
280.2334 46.9033 281.9922 46.7754 282.4111 45.1855 C
283.1655 44.5576 283.1235 43.3418 282.8716 42.5898 C
282.8716 42.1699 282.2017 41.7939 282.2852 41.208 C
281.9507 40.3691 281.1548 40.1172 280.8203 39.3223 C
280.5688 39.3223 280.2334 39.1543 280.2334 38.8193 C
279.103 38.1064 278.2656 37.6895 277.2603 36.8516 C
275.7109 36.3486 274.1611 35.0928 272.3184 34.6309 C
271.2705 34.0029 270.5591 33.668 269.5112 32.9971 C
268.8838 33.0811 268.9673 32.4102 268.3389 32.4951 C
268.1294 31.8672 267.7524 31.5723 267.9204 30.8203 C
267.25 29.5635 267.9204 28.2656 267.4165 27.0088 C
267.3335 26.2539 267.6265 25.459 267.2075 24.873 C
267.4595 24.3281 267.04 23.8662 267.25 23.2803 C
266.7056 22.6523 267.292 21.8154 266.9146 21.1865 C
266.6216 20.7686 266.7056 20.0986 266.2446 19.7217 C
266.2446 19.2598 265.6162 18.8408 265.3232 18.4639 C
264.6948 18.0459 263.8989 18.5059 263.271 18.0029 C
262.4751 18.1299 261.6792 17.543 261.0093 18.0879 C
261.0928 18.7998 260.8418 19.4688 261.2188 20.0137 C
261.3027 20.4756 260.9668 20.9775 261.3862 21.2705 C
261.3027 22.2344 261.4692 22.9863 261.4692 24.0352 C
261.9302 24.2861 261.3447 24.8301 261.8052 25.207 C
261.8882 26.4629 261.9302 27.4697 262.1406 28.7256 C
262.3071 29.2285 262.4326 30.0234 262.2666 30.5273 C
261.4277 30.5273 261.0508 29.6885 260.2144 29.7305 C
260.0879 29.3135 259.7939 29.7305 259.6274 29.4795 C
258.9575 29.2285 258.1616 28.7256 257.4907 28.6436 C
257.1987 28.2227 256.4028 28.4746 256.0259 28.0557 C
255.5225 28.0977 255.5225 27.5527 254.9365 27.7627 C
254.4766 27.3027 253.7632 27.3438 253.2197 27.3027 C
252.9673 26.8818 252.4648 27.1338 252.1719 26.7158 C
250.7471 26.8818 249.9517 25.8359 248.5698 25.7939 C
248.1514 25.416 247.6069 25.542 247.1455 25.207 C
246.3086 24.873 245.1772 25.082 244.3818 24.4531 C
243.46 24.4951 242.874 23.9502 241.9111 23.9932 c
241.0313 23.7822 240.7378 24.0771 240.0684 24.5371 C
239.481 24.9971 239.9004 25.8359 239.9004 26.3389 C
240.4458 26.9658 240.7798 27.9717 241.7021 28.0137 C
242.0786 28.4336 242.6646 28.3066 243.125 28.5156 C
243.9214 29.0195 245.0522 29.2686 245.9316 29.5215 C
246.5596 29.8975 247.2725 29.9404 247.8994 30.4844 C
248.4448 30.3584 248.8213 31.0703 249.4082 30.9043 C
249.9517 31.0293 250.3291 31.6992 250.958 31.5322 C
251.418 31.4893 251.5854 32.0771 252.0879 31.9082 C
253.1353 32.3271 254.0562 32.7461 255.188 33.0811 C
255.4805 33.333 255.8989 33.375 256.1934 33.584 C
256.8213 33.668 257.5757 33.9189 258.0352 34.3379 C
258.4531 34.2539 258.4961 34.6729 258.873 34.7559 C
259.502 34.5908 259.7104 35.1758 260.3809 35.1758 C
261.0928 35.9297 262.2666 35.5107 262.978 36.3057 C
263.3125 36.1807 263.5229 36.4746 263.6899 36.6826 C
263.6899 37.3535 264.1504 37.8975 263.9824 38.6104 C
264.2349 39.4053 263.8989 40.6201 264.2349 41.332 C
264.2349 43.0918 L
264.4434 43.5938 264.4858 44.3047 264.4014 44.8096 C
263.9824 44.9756 L
262.895 44.8506 261.3027 45.1025 259.9214 44.8096 C
259.46 44.9756 259.167 44.8926 258.7476 44.8096 C
256.5693 45.1445 254.0562 44.3486 252.0879 45.9824 C
251.7949 46.5273 251.7109 47.2373 252.1299 47.8242 C
253.2197 48.7031 254.4336 49.123 255.7319 49.0811 c
256.6953 49.2891 257.5327 48.9551 258.3711 49.458 C
258.5806 49.0811 258.8315 49.416 259.1245 49.416 C
260.2554 49.374 261.3862 49.458 262.4326 49.5 C
263.3965 48.9141 264.6948 49.374 265.7422 49.3311 C
f
292.5889 46.6094 m
292.9243 45.3955 L
292.3794 44.3486 292.7993 42.8818 292.1709 41.9189 C
292.4219 41.04 291.584 40.3262 291.7095 39.3223 c
291.584 38.5264 291.207 37.8145 291.082 37.0195 c
290.9561 36.4326 290.4526 35.8467 290.7046 35.2588 C
290.4106 34.6729 290.5371 33.9609 290.1182 33.417 C
289.9507 31.5723 289.2803 29.8975 288.7778 28.2227 C
288.6938 27.2598 287.9824 26.2539 288.8198 25.501 C
289.4482 25.627 L
289.4053 25.585 L
289.9507 25.375 290.2432 26.0459 290.8301 26.0869 C
291.2915 26.0029 291.5 26.5059 291.9614 26.2539 C
292.6318 26.1709 292.7563 25.627 292.9243 25.082 C
292.8408 24.1592 291.9194 23.7412 291.4165 22.9863 C
289.9507 21.2705 287.9395 21.2705 285.9297 21.7295 C
285.5942 21.8984 285.0503 21.9824 284.6318 22.0244 C
284.2549 22.1914 284.3374 21.4805 283.877 21.5635 C
283.0396 20.3496 281.3232 20.4756 280.1499 20.7256 C
279.8569 20.7256 279.647 21.1025 279.3125 20.9775 C
278.8926 21.5215 278.1396 21.8555 277.7632 22.4434 C
276.9243 22.1074 276.2969 21.4805 275.5845 21.0615 c
274.4541 20.5986 273.2388 20.0137 272.0669 20.5986 C
271.6064 21.1025 271.0615 21.4805 270.6841 22.0244 C
270.7676 22.1074 L
268.9253 25.416 270.9771 28.7256 271.8159 31.9932 c
271.9819 33.0811 272.8198 34.1699 273.7837 34.6729 C
274.3291 34.6729 275.333 35.3447 275.7935 34.5469 C
275.752 34.0029 276.4648 33.5 275.7109 33.0811 C
275.8774 32.0342 274.998 31.1543 274.873 30.1064 c
274.4121 28.8926 273.9927 27.5947 274.0767 26.2129 C
274.1187 25.9609 274.3701 25.709 274.5791 25.627 C
275.2495 25.542 275.9199 25.752 276.1294 26.3799 c
276.9243 27.1338 276.6743 28.3066 277.3438 29.1035 C
277.2603 30.0654 277.9717 30.7354 278.0552 31.5723 C
278.5581 31.9932 278.2656 32.4102 278.7261 32.8291 C
279.2705 34.1289 279.5635 35.3018 280.5264 36.1807 C
281.2803 36.3057 281.7827 36.0967 282.3281 35.7627 C
282.7466 35.3848 282.6206 34.6729 282.6206 34.1699 C
282.0767 32.6201 282.2017 30.7773 281.3232 29.3135 C
281.0288 28.4336 280.9878 27.3857 280.6523 26.5479 C
280.5688 25.9609 281.1548 25.542 281.5737 25.25 C
282.3696 25.207 283.249 24.957 283.7939 25.752 C
284.2129 26.5898 285.0088 27.2598 285.0503 28.2656 C
285.3013 28.5996 285.0918 29.1865 285.5522 29.4795 C
285.2598 30.1924 285.8462 30.7773 285.8872 31.5723 c
286.8506 36.0557 287.8979 40.3691 289.2803 44.8096 C
289.8252 45.8975 290.4946 47.3213 292.0864 47.1553 C
292.5889 46.6094 L
f
1 g
273.3652 44.3047 m
274.4121 44.2236 275.0815 44.2646 276.2544 44.0547 C
276.4224 43.8027 276.8408 43.8027 276.8833 43.4268 C
277.0503 42.3369 275.9199 41.71 275.2075 41.123 C
273.3223 40.5781 271.8989 38.9873 269.9727 38.6104 C
269.8047 38.3574 269.4702 38.2334 269.2183 38.3574 C
268.9673 38.6514 L
269.0923 40.9561 L
269.5537 41.249 269.0508 41.7939 269.3447 42.1279 C
269.3857 42.6719 269.8047 42.7988 269.6792 43.3838 C
269.8047 43.8457 270.2231 44.3896 270.4751 44.6416 C
271.4805 44.2236 272.4014 44.8506 273.3652 44.3047 C
f
0 g
304.4844 36.0557 m
304.6509 35.1338 304.4844 34.7148 303.9395 34.0449 C
302.3901 33.542 301.1748 32.2861 299.709 31.6162 C
298.9546 30.8203 298.3691 29.7744 298.5791 28.7256 C
299.4155 27.5947 300.7979 28.0137 301.8867 27.7207 c
303.269 27.6367 L
303.981 27.0928 304.9023 26.7158 305.5308 26.0869 C
305.4473 25.7939 305.7822 25.709 305.9907 25.542 C
306.4531 24.4531 307.2485 23.3232 306.9966 21.9824 C
307.0391 21.5635 307.1641 21.1865 307.1221 20.7686 C
307.1641 20.0137 306.6621 19.4277 306.5366 18.7998 C
306.1172 17.458 305.4897 16.4121 304.6934 15.2822 C
304.0229 14.6953 303.647 13.6465 302.7671 13.1875 c
302.1387 12.3906 301.5938 11.5957 300.8403 10.8838 C
300.6724 10.5068 300.2954 10.2969 300.0859 9.96094 C
299.3735 8.99707 298.4106 7.82715 297.6577 6.77832 c
296.7773 5.43848 295.73 4.26563 295.1021 2.75879 C
294.4736 1.50293 293.5942 0.580078 293.0503 -0.802734 C
292.5479 -1.17871 292.5049 -1.80664 292.1709 -2.30859 C
291.7935 -2.89551 291.165 -3.44043 291.0391 -4.11133 C
290.5371 -4.73926 290.3691 -5.49316 290.0342 -6.2041 c
289.4482 -7.20996 288.8198 -8.3418 287.8979 -9.05371 C
287.7729 -8.88672 287.689 -9.17676 287.5635 -9.17676 C
287.103 -9.17676 286.5161 -9.05371 286.1392 -8.71875 C
285.5107 -8.00488 285.8462 -6.95801 285.9297 -6.0791 C
285.9712 -5.3252 286.4321 -4.57031 286.5161 -3.8584 C
287.5635 -1.59766 288.1074 1.08203 289.6992 3.00977 C
289.9507 3.63867 L
289.9092 3.59473 289.9092 3.63867 289.8662 3.67969 C
290.7046 4.39258 290.7046 5.52246 291.584 6.19336 C
291.2485 6.73633 292.0029 6.73633 292.0864 7.19727 c
292.5479 7.86719 292.9243 8.87305 293.6772 9.41797 C
294.3057 10.6328 295.2275 11.2178 295.8135 12.2236 C
296.3999 12.5586 296.7773 13.2715 297.3638 13.6904 C
298.1172 13.7725 298.2012 14.5684 298.8296 14.8203 C
298.8296 15.0303 L
299.877 15.8672 300.4634 16.8311 301.0923 17.7939 C
301.3843 18.6328 301.2583 19.6797 301.6357 20.2656 C
301.7607 21.3535 301.1338 22.1504 300.3789 22.7783 C
298.8296 23.9092 296.7358 23.3643 295.1021 24.3281 C
294.6411 24.9141 293.8882 24.8301 293.4692 25.375 C
292.7148 26.4629 291.877 27.4277 292.1284 28.7676 C
292.5049 30.1494 293.2593 31.4893 294.3901 32.2861 C
295.7725 34.4629 298.2432 35.6777 300.6313 36.6826 c
301.0493 36.8916 301.5522 36.7256 302.0967 36.8516 C
302.3901 37.3125 302.8496 36.5986 303.186 36.8516 C
304.4844 36.0557 L
f
337.6963 21.9404 m
341.3828 21.9404 343.728 22.0664 347.3721 22.0244 C
347.5815 21.8154 L
348.8804 21.9824 350.1357 21.7295 351.2671 21.7734 C
351.4771 21.5635 L
352.6074 21.5635 353.5288 21.6064 354.4922 21.5215 C
354.7422 21.7295 354.8276 21.3965 354.9946 21.3125 C
356.083 21.5215 356.9624 21.1865 357.9263 21.2295 C
358.2622 20.5596 359.0156 21.0615 359.644 20.7686 C
359.644 20.5596 L
356.7534 20.0986 354.1152 18.8408 351.2671 18.6729 c
349.4243 18.2119 347.0791 17.9189 345.0679 17.543 C
344.9014 17.124 344.3569 17.376 344.1475 17.167 C
344.0625 17.167 344.0625 17.082 343.9795 17.0391 C
344.105 16.998 344.105 16.873 344.105 16.7471 C
341.6343 15.9102 339.0801 15.9922 336.6079 15.3232 c
335.603 15.1973 334.5981 15.2393 333.8022 14.9463 C
332.2104 14.7783 330.4512 15.0303 328.9854 14.5684 C
327.1846 14.4014 325.7607 14.4424 323.959 14.2764 C
323.4565 14.5684 322.8701 14.0664 322.3252 14.1924 C
321.6133 14.1494 320.8184 14.3174 320.0225 13.9834 C
319.6035 13.9834 319.1846 14.2334 318.7661 13.9414 C
318.1792 14.1494 317.6353 13.7324 316.9648 13.8145 c
315.666 13.7725 314.3262 13.6465 312.9863 13.7725 C
312.0225 13.2285 311.3945 13.8564 310.4316 13.8145 C
309.5103 14.8203 307.2905 15.4893 308.1694 17.249 C
308.0439 18.0879 308.9238 18.3389 309.2168 18.9668 C
310.3052 19.7217 311.6035 19.9727 312.7769 20.5986 C
313.4883 20.5596 314.1587 20.8936 314.7866 20.7256 C
316.1685 21.6895 317.3423 20.7686 318.7661 21.1025 c
319.3525 21.2705 320.0225 20.7686 320.5664 21.1865 C
322.4927 21.5635 324.5039 21.2295 326.3882 21.6064 c
328.0635 21.8154 329.7393 21.8154 331.4146 22.0664 C
331.874 21.8984 332.3359 22.1504 332.8389 22.0664 C
333.2148 22.0664 333.6353 22.3174 334.0112 22.0664 C
337.6963 21.9404 l
f
296.1904 19.5947 m
295.6465 18.2959 294.0547 18.5059 292.9243 18.0459 C
292.0449 16.9141 290.4946 17.124 289.2803 16.7051 c
288.2754 16.958 287.8574 15.6582 286.8936 15.8262 c
284.0869 15.2393 281.4897 14.6533 278.5166 14.2334 c
276.4224 13.8994 274.2441 13.3125 272.0669 13.1875 C
272.0669 13.1455 L
270.5166 12.8535 268.9253 12.4766 267.292 12.2646 c
266.4541 11.7627 265.5747 12.2236 264.6528 11.9316 c
260.8838 11.3447 256.9888 10.5898 253.1353 9.75098 C
252.2559 10.0449 251.502 9.25098 250.6221 9.46094 c
250.2036 9.46094 249.9106 9.29199 249.6177 9.04004 C
247.6494 8.78809 246.3921 8.95703 244.5908 8.91504 C
244.0884 9.20801 243.4185 9.29199 243.0835 9.87891 C
242.3716 11.0918 242.6226 12.3906 243.4185 13.4375 C
244.1729 14.9043 246.3501 13.8564 247.6069 14.5684 C
249.2407 14.7354 250.915 14.8633 252.5068 15.0732 C
252.9253 15.5742 253.6797 15.4063 254.1821 15.5742 C
254.6011 15.1133 254.9365 16.1191 255.2715 15.5332 C
257.2397 16.0762 259.417 16.1191 261.3862 16.6631 c
262.2666 16.7471 263.187 16.873 264.0254 17.082 C
264.8618 16.6631 265.4072 17.6689 266.2861 17.417 c
266.9565 17.501 267.8784 17.333 268.5068 17.752 C
269.4702 17.627 270.2231 17.9619 271.1865 17.835 C
271.3125 18.0879 L
272.8618 17.9619 274.1611 18.3809 275.333 18.1709 C
276.0449 18.4238 276.7148 18.3809 277.5537 18.4639 c
279.0605 18.6328 281.0713 18.5479 282.3281 18.7148 C
282.8716 19.0928 283.501 18.7568 284.2549 18.8408 C
284.6318 19.1348 285.2598 18.7148 285.6367 19.2188 C
287.312 19.1348 288.5688 19.3027 290.0757 19.4277 C
290.4946 19.9307 291.2915 19.4688 291.9194 19.5947 c
292.5479 19.8047 293.1338 19.6377 293.6772 19.9727 C
294.5161 19.7217 295.354 20.1396 296.1074 19.9307 C
296.1904 19.5947 L
f
285.6782 9.62695 m
286.2236 8.37012 286.3486 6.94629 286.3486 5.69043 C
286.3066 3.93066 286.0557 2.38184 285.5107 0.915039 c
284.6318 -0.34082 284.6318 -1.80664 283.542 -2.89551 C
282.9561 -3.77539 282.4111 -4.57031 281.4067 -4.94727 C
280.2334 -5.82715 278.6846 -6.83301 277.3018 -5.91016 C
276.3804 -5.87012 275.7109 -5.28418 274.7886 -5.07422 C
273.5332 -4.23633 273.3223 -2.68652 273.1133 -1.2627 C
273.3652 1.96191 274.7471 4.85449 276.4648 7.5332 C
276.6743 8.11816 277.3857 8.74805 277.6372 9.46094 c
278.1812 10.0879 278.6846 10.4229 279.103 11.1348 C
279.4375 11.1348 279.647 11.5537 279.9824 11.6787 C
280.8613 12.0146 281.9092 12.0146 282.9146 12.0557 C
283.249 11.9717 283.5845 11.5957 283.877 11.5537 C
284.7563 11.0918 285.1338 10.3389 285.6782 9.62695 C
f
269.0923 10.0449 m
270.1406 9.87891 271.103 9.16699 271.7314 8.2041 C
271.4805 7.28125 271.8574 6.27539 270.8521 5.48145 C
270.936 4.72656 270.0137 4.97852 269.9312 4.26563 C
269.3857 4.09766 268.9673 3.67969 268.5479 3.26074 C
269.2183 2.38184 270.4751 2.46484 271.0615 1.375 C
272.3589 0.706055 271.5635 -1.17871 271.7314 -2.18555 C
270.9771 -4.53027 270.0562 -6.75 268.8423 -8.84277 C
268.8838 -8.96875 268.8423 -9.05371 268.7158 -9.09375 C
268.0879 -11.2305 266.0352 -13.1992 264.8203 -15.21 c
263.6479 -17.4717 261.5957 -19.4805 259.7939 -21.4502 C
258.8315 -22.2861 257.7842 -22.916 256.4863 -23 C
256.2764 -22.875 255.8989 -22.665 255.8579 -22.3711 C
255.7319 -21.3252 256.3184 -20.6123 256.4028 -19.6904 C
256.9468 -19.1465 256.9038 -18.3076 257.4077 -17.7236 C
259.7939 -14.832 L
260.0459 -14.832 260.2554 -14.5811 260.3809 -14.4141 C
260.3809 -14.2041 L
263.0195 -10.7285 265.5322 -7.20996 266.8311 -3.14648 C
266.8726 -2.1416 266.4956 -1.2207 265.5747 -0.676758 C
263.4385 -0.424805 261.9731 -2.18555 259.8784 -2.39453 c
259.1245 -2.81348 258.1616 -2.51855 257.5327 -2.09961 C
257.3237 -1.68164 257.0718 -0.969727 257.4077 -0.549805 C
257.8262 1.04102 259.502 1.71094 260.9668 2.42285 C
261.3027 2.29785 261.5542 2.59082 261.7212 2.7168 C
263.187 3.42871 264.5693 4.22461 265.9932 5.1875 C
266.1187 5.39746 266.2861 5.69043 266.1616 5.94141 C
265.6162 6.69531 264.6528 6.19336 263.9409 6.19336 C
262.3071 5.52246 260.6328 4.89355 259.167 3.84766 C
258.3286 3.72168 257.1143 3.09277 256.4443 3.97266 C
255.9419 4.68457 256.1084 5.89941 256.4863 6.61133 C
256.8213 7.19727 257.7422 7.19727 258.2031 7.74316 c
259.208 8.4541 260.5483 8.83105 261.5542 9.37598 C
262.0571 9.20801 262.2236 9.58594 262.6426 9.50195 C
263.4385 9.79492 264.1934 9.96094 265.1558 10.1719 C
266.0771 10.4648 266.4956 10.2129 267.4165 10.5488 C
267.9619 10.0879 268.5903 10.5898 269.0923 10.0449 C
f
311.7715 8.28613 m
312.4004 6.77832 311.0166 5.94141 310.3052 4.93652 C
310.1377 4.55957 309.6353 4.34961 309.3843 4.13965 C
306.6621 1.20801 L
306.2012 0.370117 305.7397 -0.34082 305.4473 -1.2627 C
304.8604 -2.30859 303.814 -3.44043 303.4375 -4.69727 C
303.3945 -4.98926 303.647 -5.19922 303.856 -5.3252 C
304.0654 -5.3252 304.2739 -5.3252 304.3994 -5.11621 C
304.5259 -5.82715 305.3628 -6.37207 305.7397 -6.91699 c
306.3262 -7.41895 306.6196 -8.25684 307.2056 -8.63379 C
307.2485 -9.47168 308.0439 -9.72266 307.96 -10.6016 C
308.2954 -10.7285 308.1279 -11.1465 308.1279 -11.3984 C
307.876 -11.5244 308.1279 -11.7344 308.2114 -11.8193 C
308.4624 -12.4453 307.751 -12.9482 308.0439 -13.5762 C
307.708 -14.0781 308.1279 -14.749 307.708 -15.1689 c
307.583 -15.5029 307.583 -15.8799 307.2905 -16.1309 C
307.3315 -16.6758 307.0811 -17.2617 306.9966 -17.6807 C
306.7461 -17.9736 306.7036 -18.1826 306.4941 -18.5186 C
305.8242 -19.5674 304.9023 -20.4033 303.856 -21.1152 c
302.6831 -22.0781 301.3013 -22.3291 299.709 -22.4551 C
299.5 -22.875 299.4155 -22.2861 299.1221 -22.3711 C
298.2432 -22.5391 297.2388 -22.2861 296.8198 -21.7842 c
295.8979 -21.3662 L
295.9395 -21.2822 L
295.4365 -20.6973 294.3901 -20.1953 294.1387 -19.2295 C
293.0503 -17.9326 293.7617 -16.2988 293.4692 -14.666 C
293.5527 -13.7852 294.1807 -13.1152 294.2227 -12.2354 c
295.311 -8.5918 297.4888 -5.1582 299.2485 -2.01563 C
300.043 -1.55469 300.002 -0.424805 300.7563 0.118164 C
300.8403 0.664063 301.5107 0.748047 301.5107 1.33398 C
302.1387 1.54297 302.3901 2.17188 302.7246 2.67383 c
303.8975 4.60156 305.6563 6.02441 307.1641 7.74316 C
308.4624 8.3291 309.5513 10.1719 311.0596 9.12402 C
311.7715 8.28613 L
f
321.6133 6.15039 m
321.9072 5.94141 321.8657 5.43848 322.2417 5.27246 C
322.5771 4.68457 322.8291 3.93066 323.2891 3.51172 C
323.4565 2.84082 323.7075 2.29785 323.8335 1.62695 C
324.2944 1.45996 323.792 0.873047 324.0854 0.580078 c
324.168 -0.633789 324.2109 -1.89063 323.8335 -3.06348 C
323.3315 -3.64941 323.541 -4.53027 323.1211 -5.11621 c
322.4927 -5.57715 322.9541 -6.45605 322.2842 -6.83301 C
321.6563 -7.75391 320.5664 -8.38281 319.9385 -9.3877 C
318.8911 -9.43066 318.4312 -10.6865 317.2163 -10.4336 C
316.7979 -10.8125 316.0024 -10.3516 315.7085 -10.8535 C
315.1226 -10.9795 314.5776 -10.9365 313.9072 -10.8125 C
313.1528 -10.6865 312.8188 -9.97461 312.0645 -9.88965 C
311.981 -9.6377 311.6455 -9.55371 311.436 -9.3877 C
309.7188 -7.12402 309.9282 -3.3584 311.2266 -1.2627 c
312.4004 1.96191 314.6201 4.77051 317.1738 6.98828 C
317.5093 6.82031 317.2998 7.32227 317.5938 7.23828 C
319.1001 7.57422 320.7339 7.28125 321.6133 6.15039 C
f
1 g
282.4111 6.19336 m
282.6621 3.72168 282.2017 1.41797 280.6523 -0.383789 C
280.1084 -0.885742 279.4805 -1.2207 278.7261 -1.30469 C
278.3486 -1.2207 278.0142 -0.927734 277.8462 -0.592773 C
277.5107 1.83594 278.2656 4.18164 279.5635 6.1084 C
280.0659 6.44336 280.4014 7.19727 281.0288 7.19727 C
281.6572 7.28125 282.0767 6.61133 282.4111 6.19336 C
f
319.2681 0.958008 m
319.8545 -0.424805 319.8965 -2.39453 319.436 -3.8584 c
319.394 -4.61328 318.7241 -5.19922 318.2207 -5.70117 C
318.0117 -5.78613 317.7612 -5.87012 317.5508 -5.78613 C
317.3833 -5.57715 317.2998 -5.99512 317.0488 -5.91016 C
316.4209 -5.61914 315.4995 -5.82715 315.1641 -4.94727 C
314.7866 -2.47656 316.3789 -0.676758 317.5093 1.20801 C
317.9277 1.91992 319.0176 1.62695 319.2681 0.958008 C
f
302.2222 -10.2256 m
303.647 -11.6484 303.5205 -13.9541 303.1436 -15.7529 C
302.5151 -16.5918 301.6357 -17.2197 300.6724 -17.4717 C
299.709 -17.5547 298.7036 -17.4717 298.3267 -16.4648 C
297.7407 -14.0781 298.7461 -12.1094 299.752 -10.2256 C
300.0859 -9.72266 300.7563 -9.55371 301.2583 -9.80566 C
301.5522 -10.0986 301.9287 -10.0166 302.2222 -10.2256 C
f
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
